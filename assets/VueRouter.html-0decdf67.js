import{_ as t,W as p,X as o,Y as s,Z as n,$ as c,a0 as a,C as i}from"./framework-b5b224ca.js";const r={},l=a(`<h2 id="vue-router-前端权限控制" tabindex="-1"><a class="header-anchor" href="#vue-router-前端权限控制" aria-hidden="true">#</a> vue-router 前端权限控制</h2><p>实现权限控制的一般思路是在路由导航时判断用户是否有访问该页面的权限，如果没有，则跳转到指定页面。</p><p>在 Vue Router 中，我们可以使用路由的导航守卫来实现权限控制。具体来说，我们可以通过 beforeEach 方法来注册全局前置守卫，该守卫会在每次路由跳转前被调用，我们可以在该守卫中进行权限控制。</p><p>下面是一个示例，假设我们有两个页面，一个需要管理员权限才能访问，一个需要登录才能访问：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/admin&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> AdminPage<span class="token punctuation">,</span>
    <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">requiresAdmin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/user&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> UserPage<span class="token punctuation">,</span>
    <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">requiresAuth</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  routes<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token function">checkLoginStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检查用户是否已登录</span>
  <span class="token keyword">const</span> isAdmin <span class="token operator">=</span> <span class="token function">checkAdminStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检查用户是否是管理员</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>requiresAuth <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 需要登录但未登录，跳转到登录页面</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>requiresAdmin <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isAdmin<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 需要管理员权限但非管理员，跳转到错误页面</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&quot;/error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 其他情况直接放行</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，我们使用了 meta 字段来定义了每个路由的权限要求。在 beforeEach 方法中，我们首先通过 checkLoginStatus 和 checkAdminStatus 方法检查用户的登录状态和管理员权限，然后根据路由的 meta 字段进行判断。如果需要登录但用户未登录，则跳转到登录页面；如果需要管理员权限但用户非管理员，则跳转到错误页面；否则直接放行。</p><h2 id="动态路由" tabindex="-1"><a class="header-anchor" href="#动态路由" aria-hidden="true">#</a> 动态路由</h2><p>Vue Router 的动态路由是指使用参数来动态生成路由的一种技术。它允许我们定义一个模板路由，并通过参数来动态地生成具体的路由。</p><p>在 Vue Router 中，动态路由通常使用冒号（:）来定义参数。例如，我们可以定义一个动态路由，用于接受一个 id 参数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/user/:id&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span> User<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),u={href:"http://route.params.id",target:"_blank",rel:"noopener noreferrer"},d=a(`<p>动态路由可以让我们在不同场景下生成不同的路由，比如用于展示不同的用户信息、商品详情等等。在开发过程中，我们可以利用动态路由来简化代码，避免手动添加每个路由，提高代码复用性和开发效率。</p><p>需要注意的是，当定义了多个动态路由时，它们的顺序很重要。如果将 /user/:id 放在 /user/profile 之前，那么 /user/profile 将会被解释为一个 id 参数为 profile 的路由。为了避免这种情况，我们可以将具体路由放在动态路由之前，或者使用正则表达式来限制参数的格式。</p><h2 id="vue-router-中有哪些路由钩子" tabindex="-1"><a class="header-anchor" href="#vue-router-中有哪些路由钩子" aria-hidden="true">#</a> Vue Router 中有哪些路由钩子？</h2><p>路由钩子是指在路由导航过程中的一些生命周期函数，可以用于实现一些特定的逻辑。Vue Router 中有多种路由钩子，包括全局前置守卫 beforeEach、全局后置钩子 afterEach、组件内的守卫 beforeRouteEnter、beforeRouteUpdate 和 beforeRouteLeave 等。</p><h2 id="什么是路由懒加载-如何在-vue-router-中使用路由懒加载" tabindex="-1"><a class="header-anchor" href="#什么是路由懒加载-如何在-vue-router-中使用路由懒加载" aria-hidden="true">#</a> 什么是路由懒加载？如何在 Vue Router 中使用路由懒加载？</h2><p>路由懒加载是指在需要时才加载路由组件的技术，可以提高页面加载速度和性能。在 Vue Router 中，我们可以使用 import 函数和 webpack 的动态导入语法来实现路由懒加载。示例代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/user&quot;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;./components/User.vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="两种模式-hash-和-history" tabindex="-1"><a class="header-anchor" href="#两种模式-hash-和-history" aria-hidden="true">#</a> 两种模式 Hash 和 History</h2><p>Hash：监听浏览器的 hashchange</p><p>History：监听浏览器的 popstate，利用 pushState 和 replaceState 操作地址栏</p><p>Hash 模式</p><p>Hash 模式是 Vue Router 默认的路由模式。在 hash 模式中，URL 中的 hash 值（#后面的内容）会被用来表示当前路由，例如：<code>http://example.com/#/foo。</code></p><p>优点：</p><p>兼容性好：hash 模式的实现不依赖于浏览器对 HTML5 History API 的支持，可以兼容各种浏览器。<br> 简单易用：hash 模式的实现简单易懂，开发人员可以很容易地理解和使用。<br> 防止服务器请求：由于 hash 值不会被发送到服务器，所以服务器不会根据 URL 的变化发送新的请求。</p><p>缺点：</p><p>URL 不美观：hash 值看起来不太美观，不太符合现代网站设计的要求。<br> 限制性较大：由于 hash 值的限制，无法在服务器端根据 URL 的变化返回相应的页面，这会对 SEO 产生一定的影响。<br> 安全性较差：hash 值可以被篡改，因此在一定程度上存在安全风险。</p><p>History 模式</p><p>History 模式是 Vue Router 的另一种路由模式。在 History 模式中，URL 中不再带有#符号，而是直接使用常规的 URL 格式，例如：<code>http://example.com/foo。</code></p><p>优点：</p><p>URL 美观：history 模式下，URL 更加美观，符合现代网站设计的要求。<br> 对 SEO 友好：history 模式下，可以在服务器端根据 URL 的变化返回相应的页面，对 SEO 比较友好。<br> 安全性好：history 模式下，URL 不易被篡改，因此安全性较高。</p><p>缺点：</p><p>兼容性差：history 模式的实现依赖于浏览器对 HTML5 History API 的支持，因此在一些老旧的浏览器上可能存在兼容性问题。<br> 需要服务器配合：在 history 模式下，服务器需要进行相应的配置，以确保在用户刷新页面或者直接访问某个 URL 时能够正确地返回相应的页面。</p><blockquote><p>刷新的时候地址栏发送的请求不是真是存在的请求，会出现 404 因此服务端需要返回 index.html 再 index.html 走路由配置获取对应的页面</p></blockquote><h2 id="history-刷新-404-解决方案" tabindex="-1"><a class="header-anchor" href="#history-刷新-404-解决方案" aria-hidden="true">#</a> history 刷新 404 解决方案</h2><p>当我们进入到子路由时刷新页面，<code>web</code> 容器没有相对应的页面此时会出现 404</p><p>所以我们只需要配置将任意页面都重定向到 <code>index.html</code>，把路由交由前端处理</p><p>对 <code>nginx</code> 配置文件<code>.conf</code> 修改，添加 <code>try_files $uri $uri/ /index.html</code>;</p><div class="language-s line-numbers-mode" data-ext="s"><pre class="language-s"><code>server {
  listen  80;
  server_name  www.xxx.com;

  location / {
    index  /data/dist/index.html;
    try_files $uri $uri/ /index.html;
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置之后更新 <code>nginx</code> 配置<code>nginx -s reload</code> 这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 <code>index.html</code> 文件</p><p>为了避免这种情况，你应该在 Vue 应用里面覆盖所有的路由情况，然后在给出一个 404 页面</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;history&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> NotFoundComponent <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31);function k(v,m){const e=i("ExternalLinkIcon");return p(),o("div",null,[l,s("p",null,[n("上述代码中，我们使用 /user/:id 定义了一个动态路由，其中 :id 表示参数。在访问 /user/123 时，123 将被作为参数传递到 User 组件中，我们可以通过 $"),s("a",u,[n("route.params.id"),c(e)]),n(" 来获取这个参数。")]),d])}const b=t(r,[["render",k],["__file","VueRouter.html.vue"]]);export{b as default};

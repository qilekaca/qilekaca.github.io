const e=JSON.parse('{"key":"v-6d2f392b","path":"/posts/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/Vue.html","title":"Vue常见面试题","lang":"zh-CN","frontmatter":{"title":"Vue常见面试题","date":"2020-04-01T00:00:00.000Z","category":["前端"],"tag":["Vue面试题"],"description":"Vue 常见面试题 v-if 和 v-show 的区别 v-show 的执行是不管条件是真是假，第一次渲染的时候都会被编译出来，也就是标签会被添加到 dom 中，之后切换的时候是通过 display：none 来显示隐藏元素。几乎不会影响什么性能。 v-if 在首次渲染的时候如果条件为假什么也不操作，页面当作没有这些元素，当条件为真的时候开始局部编译，动态向 dom 添加元素，当条件变为假的时候开始局部编译卸载这些元素 所以直观的理解就是当我们需要频繁切换元素的显示与隐藏我们可以使用 v-show，如果在运行时条件很少改变，则使用 v-if 较好。","head":[["meta",{"property":"og:url","content":"https://qilekaca.github.io/posts/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/Vue.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"Vue常见面试题"}],["meta",{"property":"og:description","content":"Vue 常见面试题 v-if 和 v-show 的区别 v-show 的执行是不管条件是真是假，第一次渲染的时候都会被编译出来，也就是标签会被添加到 dom 中，之后切换的时候是通过 display：none 来显示隐藏元素。几乎不会影响什么性能。 v-if 在首次渲染的时候如果条件为假什么也不操作，页面当作没有这些元素，当条件为真的时候开始局部编译，动态向 dom 添加元素，当条件变为假的时候开始局部编译卸载这些元素 所以直观的理解就是当我们需要频繁切换元素的显示与隐藏我们可以使用 v-show，如果在运行时条件很少改变，则使用 v-if 较好。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-01T03:40:38.000Z"}],["meta",{"property":"article:author","content":"ZhangWei"}],["meta",{"property":"article:tag","content":"Vue面试题"}],["meta",{"property":"article:published_time","content":"2020-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-01T03:40:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue常见面试题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-01T03:40:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ZhangWei\\",\\"url\\":\\"https://qilekaca.github.io\\"}]}"]]},"headers":[{"level":2,"title":"v-if 和 v-show 的区别","slug":"v-if-和-v-show-的区别","link":"#v-if-和-v-show-的区别","children":[]},{"level":2,"title":"key 的作用","slug":"key-的作用","link":"#key-的作用","children":[]},{"level":2,"title":"computed 的和 watch 的区别和 function 的区别","slug":"computed-的和-watch-的区别和-function-的区别","link":"#computed-的和-watch-的区别和-function-的区别","children":[]},{"level":2,"title":"解释 mvvm","slug":"解释-mvvm","link":"#解释-mvvm","children":[]},{"level":2,"title":"vue 的双向数据绑定的实现，响应式原理","slug":"vue-的双向数据绑定的实现-响应式原理","link":"#vue-的双向数据绑定的实现-响应式原理","children":[]},{"level":2,"title":"Vue 组件的 data 为什么必须是函数","slug":"vue-组件的-data-为什么必须是函数","link":"#vue-组件的-data-为什么必须是函数","children":[]}],"git":{"createdTime":1680320438000,"updatedTime":1680320438000,"contributors":[{"name":"张伟","email":"37145794+qilekaca@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.58,"words":1375},"filePathRelative":"posts/知识储备/Vue.md","localizedDate":"2020年4月1日","excerpt":"<h1> Vue 常见面试题</h1>\\n<h2> v-if 和 v-show 的区别</h2>\\n<p>v-show 的执行是不管条件是真是假，第一次渲染的时候都会被编译出来，也就是标签会被添加到 dom 中，之后切换的时候是通过 display：none 来显示隐藏元素。几乎不会影响什么性能。\\nv-if 在首次渲染的时候如果条件为假什么也不操作，页面当作没有这些元素，当条件为真的时候开始局部编译，动态向 dom 添加元素，当条件变为假的时候开始局部编译卸载这些元素\\n所以直观的理解就是当我们需要频繁切换元素的显示与隐藏我们可以使用 v-show，如果在运行时条件很少改变，则使用 v-if 较好。</p>","autoDesc":true}');export{e as data};

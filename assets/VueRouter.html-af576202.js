const n=JSON.parse('{"key":"v-27362eb0","path":"/posts/texts/VueRouter.html","title":"VueRouter","lang":"zh-CN","frontmatter":{"title":"VueRouter","date":"2020-04-01T00:00:00.000Z","category":["前端"],"tag":["Vue面试题","VueRouter"],"description":"vue-router 前端权限控制 实现权限控制的一般思路是在路由导航时判断用户是否有访问该页面的权限，如果没有，则跳转到指定页面。 在 Vue Router 中，我们可以使用路由的导航守卫来实现权限控制。具体来说，我们可以通过 beforeEach 方法来注册全局前置守卫，该守卫会在每次路由跳转前被调用，我们可以在该守卫中进行权限控制。 下面是一个示例，假设我们有两个页面，一个需要管理员权限才能访问，一个需要登录才能访问： const routes = [ { path: \\"/admin\\", component: AdminPage, meta: { requiresAdmin: true, }, }, { path: \\"/user\\", component: UserPage, meta: { requiresAuth: true, }, }, ]; const router = new VueRouter({ routes, }); router.beforeEach((to, from, next) =&gt; { const isLoggedIn = checkLoginStatus(); // 检查用户是否已登录 const isAdmin = checkAdminStatus(); // 检查用户是否是管理员 if (to.meta.requiresAuth &amp;&amp; !isLoggedIn) { // 需要登录但未登录，跳转到登录页面 next(\\"/login\\"); } else if (to.meta.requiresAdmin &amp;&amp; !isAdmin) { // 需要管理员权限但非管理员，跳转到错误页面 next(\\"/error\\"); } else { // 其他情况直接放行 next(); } });","head":[["meta",{"property":"og:url","content":"https://qilekaca.github.io/posts/texts/VueRouter.html"}],["meta",{"property":"og:site_name","content":"o_o"}],["meta",{"property":"og:title","content":"VueRouter"}],["meta",{"property":"og:description","content":"vue-router 前端权限控制 实现权限控制的一般思路是在路由导航时判断用户是否有访问该页面的权限，如果没有，则跳转到指定页面。 在 Vue Router 中，我们可以使用路由的导航守卫来实现权限控制。具体来说，我们可以通过 beforeEach 方法来注册全局前置守卫，该守卫会在每次路由跳转前被调用，我们可以在该守卫中进行权限控制。 下面是一个示例，假设我们有两个页面，一个需要管理员权限才能访问，一个需要登录才能访问： const routes = [ { path: \\"/admin\\", component: AdminPage, meta: { requiresAdmin: true, }, }, { path: \\"/user\\", component: UserPage, meta: { requiresAuth: true, }, }, ]; const router = new VueRouter({ routes, }); router.beforeEach((to, from, next) =&gt; { const isLoggedIn = checkLoginStatus(); // 检查用户是否已登录 const isAdmin = checkAdminStatus(); // 检查用户是否是管理员 if (to.meta.requiresAuth &amp;&amp; !isLoggedIn) { // 需要登录但未登录，跳转到登录页面 next(\\"/login\\"); } else if (to.meta.requiresAdmin &amp;&amp; !isAdmin) { // 需要管理员权限但非管理员，跳转到错误页面 next(\\"/error\\"); } else { // 其他情况直接放行 next(); } });"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-06T06:40:17.000Z"}],["meta",{"property":"article:author","content":"ZhangWei"}],["meta",{"property":"article:tag","content":"Vue面试题"}],["meta",{"property":"article:tag","content":"VueRouter"}],["meta",{"property":"article:published_time","content":"2020-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-06T06:40:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"VueRouter\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-06T06:40:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ZhangWei\\",\\"url\\":\\"https://github.com/qilekaca\\"}]}"]]},"headers":[{"level":2,"title":"vue-router 前端权限控制","slug":"vue-router-前端权限控制","link":"#vue-router-前端权限控制","children":[]},{"level":2,"title":"动态路由","slug":"动态路由","link":"#动态路由","children":[]},{"level":2,"title":"Vue Router 中有哪些路由钩子？","slug":"vue-router-中有哪些路由钩子","link":"#vue-router-中有哪些路由钩子","children":[]},{"level":2,"title":"什么是路由懒加载？如何在 Vue Router 中使用路由懒加载？","slug":"什么是路由懒加载-如何在-vue-router-中使用路由懒加载","link":"#什么是路由懒加载-如何在-vue-router-中使用路由懒加载","children":[]},{"level":2,"title":"两种模式 Hash 和 History","slug":"两种模式-hash-和-history","link":"#两种模式-hash-和-history","children":[]},{"level":2,"title":"history 刷新 404 解决方案","slug":"history-刷新-404-解决方案","link":"#history-刷新-404-解决方案","children":[]}],"git":{"createdTime":1680763217000,"updatedTime":1680763217000,"contributors":[{"name":"张伟","email":"37145794+qilekaca@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":5.67,"words":1702},"filePathRelative":"posts/texts/VueRouter.md","localizedDate":"2020年4月1日","excerpt":"<h2> vue-router 前端权限控制</h2>\\n<p>实现权限控制的一般思路是在路由导航时判断用户是否有访问该页面的权限，如果没有，则跳转到指定页面。</p>\\n<p>在 Vue Router 中，我们可以使用路由的导航守卫来实现权限控制。具体来说，我们可以通过 beforeEach 方法来注册全局前置守卫，该守卫会在每次路由跳转前被调用，我们可以在该守卫中进行权限控制。</p>\\n<p>下面是一个示例，假设我们有两个页面，一个需要管理员权限才能访问，一个需要登录才能访问：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">const</span> routes <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>\\n  <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">path</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"/admin\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">component</span><span class=\\"token operator\\">:</span> AdminPage<span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">meta</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token literal-property property\\">requiresAdmin</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">path</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"/user\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">component</span><span class=\\"token operator\\">:</span> UserPage<span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">meta</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token literal-property property\\">requiresAuth</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">const</span> router <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">VueRouter</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n  routes<span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\nrouter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">beforeEach</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">to<span class=\\"token punctuation\\">,</span> from<span class=\\"token punctuation\\">,</span> next</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> isLoggedIn <span class=\\"token operator\\">=</span> <span class=\\"token function\\">checkLoginStatus</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 检查用户是否已登录</span>\\n  <span class=\\"token keyword\\">const</span> isAdmin <span class=\\"token operator\\">=</span> <span class=\\"token function\\">checkAdminStatus</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 检查用户是否是管理员</span>\\n\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>to<span class=\\"token punctuation\\">.</span>meta<span class=\\"token punctuation\\">.</span>requiresAuth <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span>isLoggedIn<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 需要登录但未登录，跳转到登录页面</span>\\n    <span class=\\"token function\\">next</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"/login\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>to<span class=\\"token punctuation\\">.</span>meta<span class=\\"token punctuation\\">.</span>requiresAdmin <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span>isAdmin<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 需要管理员权限但非管理员，跳转到错误页面</span>\\n    <span class=\\"token function\\">next</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"/error\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 其他情况直接放行</span>\\n    <span class=\\"token function\\">next</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};

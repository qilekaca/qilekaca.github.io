import{_ as n,W as a,X as s,a0 as e}from"./framework-b5b224ca.js";const p={},t=e(`<p>webpack 是一个前端构建工具，可以将多个 js 文件打包成一个或多个包，并且可以进行各种优化以提高应用程序的性能。</p><h2 id="常见优化措施" tabindex="-1"><a class="header-anchor" href="#常见优化措施" aria-hidden="true">#</a> 常见优化措施</h2><ul><li><p>代码分割：将应用程序代码分割成更小的块，只加载必要的代码，可以减少初始加载事件并提高应用程序的性能</p></li><li><p>Tree Shaking：通过静态分析代码，识别和移除没有使用的代码，以减少代码包的大小</p></li><li><p>懒加载：需要时加载代码和资源，而不是在应用程序启动时加载所有内容，提高初始加载速度和整体性能</p></li><li><p>缓存：通过设置文件名哈希值或使用 chunkhash 和 contenthash，可以使浏览器缓存资源，以减少请求并加速页面加载速度。</p></li><li><p>外部化依赖项：将库或框架等依赖项作为外部资源加载，而不是将其打包到应用程序代码中。这可以提高应用程序性能并减少打包的大小。</p></li><li><p>优化图片：使用压缩工具，例如 image-webpack-loader 或 file-loader，可以对图片进行优化以减少文件的大小，并提高应用程序的加载速度。</p></li><li><p>优化 CSS：使用 extract-text-webpack-plugin 提取 css，并使用 cssnano 进行压缩，以减少文件大小提高程序性能。</p></li><li><p>按需加载：使用 dynamic import 和 import（）方法，实现按需加载 js 模块。</p></li></ul><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><h3 id="webpack-是什么-作用" tabindex="-1"><a class="header-anchor" href="#webpack-是什么-作用" aria-hidden="true">#</a> webpack 是什么？作用？</h3><p>Webpack 是一个现代的 js 应用程序静态模块打包器，它将多个模块打包成单个文件，以便于浏览器加载。它的主要作用是优化前端代码的构建和打包过程，可以提高应用程序的性能和可维护性。</p><h3 id="什么是-loader-在-webpack-中有哪些常用的-loader" tabindex="-1"><a class="header-anchor" href="#什么是-loader-在-webpack-中有哪些常用的-loader" aria-hidden="true">#</a> 什么是 Loader？在 Webpack 中有哪些常用的 Loader？</h3><p>Loader 是 Webpack 中的一个重要概念，它的作用是将不同类型的文件转换为模块，以便于被 Webpack 处理和打包。常用的 Loader 有：babel-loader、css-loader、style-loader、file-loader、url-loader 等。</p><ul><li><p>babel-loader：用于将 ES6 语法转换成 ES5 语法。</p></li><li><p>css-loader：用于处理 CSS 文件，支持导入 CSS 文件。</p></li><li><p>style-loader：将 CSS 代码插入到 HTML 文件中的 style 标签中。</p></li><li><p>file-loader：用于处理各种文件类型的导入，包括图片、字体等。</p></li><li><p>url-loader：和 file-loader 类似，但支持将文件转换成 base64 编码的 URL。</p></li></ul><h3 id="什么是-plugin-在-webpack-中有哪些常用的-plugin" tabindex="-1"><a class="header-anchor" href="#什么是-plugin-在-webpack-中有哪些常用的-plugin" aria-hidden="true">#</a> 什么是 Plugin？在 Webpack 中有哪些常用的 Plugin？</h3><p>Plugin 是 Webpack 中的另一个重要概念，它的作用是在 Webpack 的构建过程中执行一些额外的任务，例如打包优化、资源管理、环境变量注入等。常用的 Plugin 有：HtmlWebpackPlugin、CleanWebpackPlugin、UglifyJsPlugin、ExtractTextPlugin 等。</p><ul><li><p>HtmlWebpackPlugin：生成 HTML 文件，并自动引入打包后的 js、CSS 等文件。</p></li><li><p>CleanWebpackPlugin：清除指定目录下的旧文件。</p></li><li><p>UglifyJsPlugin：压缩 js 代码。还可以进行 Tree Shaking</p></li><li><p>ExtractTextPlugin：将 CSS 代码提取到单独的文件中。</p></li></ul><h3 id="webpack-的优化有哪些方面" tabindex="-1"><a class="header-anchor" href="#webpack-的优化有哪些方面" aria-hidden="true">#</a> Webpack 的优化有哪些方面？</h3><p>Webpack 的优化主要包括以下方面：代码分割、摇树、懒加载、缓存、外部化依赖项、优化图片、优化 CSS、按需加载等。</p><ul><li><p>代码分割：将应用程序代码拆分成更小的块，以减少初始加载时间。</p></li><li><p>摇树：通过静态分析代码，识别和移除没有使用的代码，以减少代码包的大小。</p></li><li><p>懒加载：仅在需要时加载代码和资源，以减少初始加载时间。</p></li><li><p>缓存：通过设置文件名哈希值或使用 chunkhash 或 contenthash，使浏览器缓存资源。</p></li><li><p>外部化依赖项：将库或框架等依赖项作为外部资源加载，以减少打包的大小。</p></li><li><p>优化图片：使用压缩工具，例如 image-webpack-loader 或者 file-loader，可以对图片进行优化以减小文件大小。</p></li><li><p>优化 CSS：使用 extract-text-webpack-plugin 提取 CSS，并使用 cssnano 进行压缩，以减少文件大小。</p></li><li><p>按需加载：使用 dynamic import 和 import() 方法，实现按需加载 js 模块。</p></li></ul><h3 id="什么是热更新-如何在-webpack-中实现热更新" tabindex="-1"><a class="header-anchor" href="#什么是热更新-如何在-webpack-中实现热更新" aria-hidden="true">#</a> 什么是热更新？如何在 Webpack 中实现热更新？</h3><p>热更新是指在代码修改后，不需要重新加载整个页面，而是只更新被修改的部分，以提高开发效率。在 Webpack 中，可以通过使用 webpack-dev-server 或者 webpack-hot-middleware 等插件来实现热更新。</p><ul><li><p>在 webpack.config.js 中配置 devServer.hot 参数为 true，启用热更新。</p></li><li><p>在 entry 中添加 webpack-hot-middleware/client，以启用客户端热更新。</p></li><li><p>在 plugins 中添加 new webpack.HotModuleReplacementPlugin()，以启用服务器端热更新。</p></li><li><p>在 module 中配置相应的 Loader，以支持热更新。</p></li></ul><h3 id="什么是-tree-shaking-如何在-webpack-中实现-tree-shaking" tabindex="-1"><a class="header-anchor" href="#什么是-tree-shaking-如何在-webpack-中实现-tree-shaking" aria-hidden="true">#</a> 什么是 Tree Shaking？如何在 Webpack 中实现 Tree Shaking？</h3><p>Tree Shaking 是指通过静态分析，识别和移除没有使用的代码，以减少代码包的大小。在 Webpack 中，可以通过以下方式实现 Tree Shaking：</p><ul><li><p>确保使用的是支持 ES6 模块的 js 代码，以便于 Webpack 进行静态分析。</p></li><li><p>在 webpack.config.js 中设置 mode 为 production，以启用 UglifyJsPlugin 插件。</p></li><li><p>在 module.rules 中配置相应的 Loader，以支持 ES6 语法。</p></li><li><p>在 package.json 文件中设置 sideEffects 为 false 或指定不被 Tree Shaking 的文件列表，以避免误删必要的代码。</p></li></ul><h3 id="什么是-chunk-在-webpack-中如何优化-chunk" tabindex="-1"><a class="header-anchor" href="#什么是-chunk-在-webpack-中如何优化-chunk" aria-hidden="true">#</a> 什么是 Chunk？在 Webpack 中如何优化 Chunk？</h3><p>Chunk 是 Webpack 打包生成的代码块，包括 Entry Chunk、Async Chunk 等。优化 Chunk 可以通过代码分割、压缩代码、公共代码提取等方式来实现。</p><h3 id="什么是代码分割-如何在-webpack-中实现代码分割" tabindex="-1"><a class="header-anchor" href="#什么是代码分割-如何在-webpack-中实现代码分割" aria-hidden="true">#</a> 什么是代码分割？如何在 Webpack 中实现代码分割？</h3><p>代码分割是将应用程序代码拆分成更小的块，以减少初始加载时间和提高应用程序性能的一种技术。在 Webpack 中，可以通过以下方式实现代码分割：</p><ul><li><p>使用 import() 语法动态导入模块，以实现按需加载。</p></li><li><p>在 webpack.config.js 中配置 optimization.splitChunks 参数，以启用代码分割功能。</p></li><li><p>使用 CommonsChunkPlugin 插件，将重复的代码提取到单独的文件中。</p></li><li><p>使用 MiniCssExtractPlugin 插件，将 CSS 代码提取到单独的文件中。</p></li><li><p>在 HtmlWebpackPlugin 中配置 chunks 参数，以指定需要加载的代码块。</p></li></ul><h3 id="如何在-webpack-中优化图片" tabindex="-1"><a class="header-anchor" href="#如何在-webpack-中优化图片" aria-hidden="true">#</a> 如何在 Webpack 中优化图片？</h3><p>在 Webpack 中，可以通过以下方式优化图片：</p><ul><li><p>使用压缩工具，例如 image-webpack-loader 或者 file-loader，可以对图片进行优化以减小文件大小。</p></li><li><p>在 module.rules 中配置相应的 Loader，以支持图片格式，例如 jpg、png、svg 等。</p></li><li><p>在 webpack.config.js 中设置 optimization.minimize 参数为 true，以启用 UglifyJsPlugin 插件，压缩图片文件。</p></li></ul><h3 id="如何在-webpack-中使用-css-预处理器" tabindex="-1"><a class="header-anchor" href="#如何在-webpack-中使用-css-预处理器" aria-hidden="true">#</a> 如何在 Webpack 中使用 CSS 预处理器？</h3><p>在 Webpack 中，可以通过以下方式使用 CSS 预处理器：</p><ul><li><p>在 module.rules 中配置相应的 Loader，例如 sass-loader、less-loader 等，以支持 CSS 预处理器。</p></li><li><p>在 webpack.config.js 中使用 MiniCssExtractPlugin 插件，将 CSS 代码提取到单独的文件中。</p></li><li><p>在项目中安装相应的预处理器，例如 node-sass、sass、less 等。</p></li></ul><h3 id="如何在-webpack-中使用-source-map" tabindex="-1"><a class="header-anchor" href="#如何在-webpack-中使用-source-map" aria-hidden="true">#</a> 如何在 Webpack 中使用 Source Map？</h3><p>在 Webpack 中，可以通过以下方式使用 Source Map：</p><ul><li><p>在 webpack.config.js 中设置 devtool 参数，以启用 Source Map 功能。例如设置 devtool 为 eval-source-map。</p></li><li><p>在 package.json 中设置 sourceMap 参数为 true，以启用 Source Map 功能。</p></li><li><p>在开发环境中使用 Source Map，以方便调试代码。</p></li></ul><h3 id="如何在-webpack-中配置多页面应用" tabindex="-1"><a class="header-anchor" href="#如何在-webpack-中配置多页面应用" aria-hidden="true">#</a> 如何在 Webpack 中配置多页面应用？</h3><p>在 Webpack 中，可以通过以下方式配置多页面应用：</p><ul><li><p>在 entry 中配置多个入口文件，以实现多页面应用。</p></li><li><p>在 output 中配置 filename 参数和 chunkFilename 参数，以指定输出文件的名称和路径。</p></li><li><p>在 HtmlWebpackPlugin 中配置多个实例，以生成多个 HTML 文件。</p></li><li><p>在 CleanWebpackPlugin 中配置 cleanOnceBeforeBuildPatterns 参数，以清理不需要的文件。</p></li><li><p>在 optimization.runtimeChunk 中配置 runtimeChunk 参数，以提取运行时代码。</p></li></ul><h3 id="如何在-webpack-中优化打包速度" tabindex="-1"><a class="header-anchor" href="#如何在-webpack-中优化打包速度" aria-hidden="true">#</a> 如何在 Webpack 中优化打包速度？</h3><p>在 Webpack 中，可以通过以下方式优化打包速度：</p><ul><li><p>在 webpack.config.js 中设置 mode 参数为 production，以启用代码压缩和优化功能。</p></li><li><p>在 module.rules 中使用 exclude 和 include 参数，以避免不必要的文件解析。</p></li><li><p>使用 HappyPack 插件，以实现多线程并发处理任务。</p></li><li><p>使用 DllPlugin 和 DllReferencePlugin 插件，以提前编译和缓存常用的依赖项。</p></li><li><p>在 optimization 中配置 minimizer 参数，以自定义代码压缩工具。</p></li></ul><p>以上是针对 Webpack 前端优化的一些常见问题，通过了解这些问题和答案，可以帮助前端工程师更好地掌握 Webpack 技术，并能够更好地应对实际开发中的挑战。</p><h2 id="常见问题的代码实现" tabindex="-1"><a class="header-anchor" href="#常见问题的代码实现" aria-hidden="true">#</a> 常见问题的代码实现</h2><h3 id="使用-tree-shaking" tabindex="-1"><a class="header-anchor" href="#使用-tree-shaking" aria-hidden="true">#</a> 使用 tree shaking</h3><p>可以在打包过程中删除无用代码，从而减少打包后的代码量，提高运行性能。</p><p>例如，以下是一个无用代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> foo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过在 webpack.config.js 中启用 UglifyJS 插件来实现 Tree Shaking</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;uglifyjs-webpack-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js(\\?.*)?$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">sourceMap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分离-css" tabindex="-1"><a class="header-anchor" href="#分离-css" aria-hidden="true">#</a> 分离 CSS</h3><p>将 CSS 与 js 分离，可以减少 js 文件的大小，提高应用程序的性能和速度。</p><p>可以通过使用 MiniCssExtractPlugin 插件来实现分离 CSS。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;mini-css-extract-plugin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&quot;css-loader&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name].css&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">&quot;[id].css&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-cdn-加载常用库" tabindex="-1"><a class="header-anchor" href="#使用-cdn-加载常用库" aria-hidden="true">#</a> 使用 CDN 加载常用库</h3><p>将常用库从本地加载改为使用 CDN 加载，可以减少资源请求的数量，提高应用程序的性能和速度。</p><p>例如，以下是一个使用 CDN 加载 jQuery 的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span class="token constant">CDN</span> Example<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello<span class="token punctuation">,</span> World<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;./index.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用缓存和长效缓存" tabindex="-1"><a class="header-anchor" href="#使用缓存和长效缓存" aria-hidden="true">#</a> 使用缓存和长效缓存</h3><p>使用缓存可以减少资源请求的数量，提高应用程序的性能和速度。</p><p>可以通过配置 output.filename 和 output.chunkFilename 来实现长效缓存。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name].[contenthash].js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">chunkFilename</span><span class="token operator">:</span> <span class="token string">&quot;[id].[contenthash].js&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-webpack-bundle-analyzer-分析打包文件" tabindex="-1"><a class="header-anchor" href="#使用-webpack-bundle-analyzer-分析打包文件" aria-hidden="true">#</a> 使用 webpack-bundle-analyzer 分析打包文件</h3><p>使用 webpack-bundle-analyzer 插件可以分析打包后的文件大小和结构，找出需要优化的地方，从而提高应用程序的性能和速度。</p><p>可以通过在 webpack.config.js 中配置该插件来使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> BundleAnalyzerPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack-bundle-analyzer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-dllplugin-和-dllreferenceplugin" tabindex="-1"><a class="header-anchor" href="#使用-dllplugin-和-dllreferenceplugin" aria-hidden="true">#</a> 使用 DllPlugin 和 DllReferencePlugin</h3><p>使用 DllPlugin 和 DllReferencePlugin 可以提前编译和缓存常用的依赖项，从而提高应用程序的性能和速度。</p><p>以下是一个示例，假设我们有一个常用库 vendor.js，可以使用 DllPlugin 和 DllReferencePlugin 将其编译和缓存起来。</p><p>首先，我们需要在 webpack.config.js 中配置 DllPlugin：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">vendor</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;react&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;[name].dll.js&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&quot;[name]&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;[name]&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist/[name].manifest.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在应用程序的 webpack.config.js 中，我们可以通过 DllReferencePlugin 引用 vendor.js：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;webpack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">context</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">manifest</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist/vendor.manifest.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,72),l=[t];function o(i,c){return a(),s("div",null,l)}const u=n(p,[["render",o],["__file","webpack面试题.html.vue"]]);export{u as default};

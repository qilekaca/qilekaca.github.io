const e=JSON.parse('{"key":"v-92e75724","path":"/posts/texts/Javascript.html","title":"JS常见面试题","lang":"zh-CN","frontmatter":{"title":"JS常见面试题","date":"2020-04-01T00:00:00.000Z","category":["前端"],"tag":["JS面试题"],"description":"事件捕获和冒泡 在 JavaScript 中，事件捕获和事件冒泡是处理事件的两种不同方式。它们是 DOM 事件模型的组成部分，用于描述事件从 DOM 树的哪个节点开始传播，以及事件的传播顺序。 事件捕获是指事件从最外层的元素开始向内部元素传播的过程，直到达到最具体的目标元素。这个过程可以用 addEventListener() 方法来实现，通过设置第三个参数为 true 来启用事件捕获。在事件捕获阶段中，事件会首先被最外层的元素捕获，然后向下传播到目标元素。 事件冒泡则是指事件从目标元素开始向外传播到最外层的元素的过程。在事件冒泡阶段中，事件会首先在目标元素上触发，然后从内向外依次传播到包含元素，直到最外层的元素。这是事件传播的默认行为，如果不设置事件捕获，那么事件会按照事件冒泡的方式进行传播。","head":[["meta",{"property":"og:url","content":"https://qilekaca.github.io/posts/texts/Javascript.html"}],["meta",{"property":"og:site_name","content":"o_o"}],["meta",{"property":"og:title","content":"JS常见面试题"}],["meta",{"property":"og:description","content":"事件捕获和冒泡 在 JavaScript 中，事件捕获和事件冒泡是处理事件的两种不同方式。它们是 DOM 事件模型的组成部分，用于描述事件从 DOM 树的哪个节点开始传播，以及事件的传播顺序。 事件捕获是指事件从最外层的元素开始向内部元素传播的过程，直到达到最具体的目标元素。这个过程可以用 addEventListener() 方法来实现，通过设置第三个参数为 true 来启用事件捕获。在事件捕获阶段中，事件会首先被最外层的元素捕获，然后向下传播到目标元素。 事件冒泡则是指事件从目标元素开始向外传播到最外层的元素的过程。在事件冒泡阶段中，事件会首先在目标元素上触发，然后从内向外依次传播到包含元素，直到最外层的元素。这是事件传播的默认行为，如果不设置事件捕获，那么事件会按照事件冒泡的方式进行传播。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-21T14:55:47.000Z"}],["meta",{"property":"article:author","content":"ZhangWei"}],["meta",{"property":"article:tag","content":"JS面试题"}],["meta",{"property":"article:published_time","content":"2020-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-21T14:55:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JS常见面试题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-21T14:55:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ZhangWei\\",\\"url\\":\\"https://github.com/qilekaca\\"}]}"]]},"headers":[{"level":2,"title":"事件捕获和冒泡","slug":"事件捕获和冒泡","link":"#事件捕获和冒泡","children":[]},{"level":2,"title":"this 的指向","slug":"this-的指向","link":"#this-的指向","children":[]},{"level":2,"title":"实现自己的 bind call apply","slug":"实现自己的-bind-call-apply","link":"#实现自己的-bind-call-apply","children":[]},{"level":2,"title":"深浅拷贝","slug":"深浅拷贝","link":"#深浅拷贝","children":[]},{"level":2,"title":"创建 ajax","slug":"创建-ajax","link":"#创建-ajax","children":[]},{"level":2,"title":"Promise 的使用","slug":"promise-的使用","link":"#promise-的使用","children":[]},{"level":2,"title":"new 一个对象的时候发生了什么","slug":"new-一个对象的时候发生了什么","link":"#new-一个对象的时候发生了什么","children":[]},{"level":2,"title":"数组去重","slug":"数组去重","link":"#数组去重","children":[]},{"level":2,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":2,"title":"闭包","slug":"闭包","link":"#闭包","children":[]},{"level":2,"title":"事件循环","slug":"事件循环","link":"#事件循环","children":[]},{"level":2,"title":"执行上下文","slug":"执行上下文","link":"#执行上下文","children":[]},{"level":2,"title":"深拷贝","slug":"深拷贝","link":"#深拷贝","children":[]},{"level":2,"title":"实现一个批量请求函数，能够限制并发量","slug":"实现一个批量请求函数-能够限制并发量","link":"#实现一个批量请求函数-能够限制并发量","children":[]}],"git":{"createdTime":1737471347000,"updatedTime":1737471347000,"contributors":[{"name":"张伟","email":"37145794+qilekaca@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":9.34,"words":2803},"filePathRelative":"posts/texts/Javascript.md","localizedDate":"2020年4月1日","excerpt":"<h2> 事件捕获和冒泡</h2>\\n<p>在 JavaScript 中，事件捕获和事件冒泡是处理事件的两种不同方式。它们是 DOM 事件模型的组成部分，用于描述事件从 DOM 树的哪个节点开始传播，以及事件的传播顺序。</p>\\n<p>事件捕获是指事件从最外层的元素开始向内部元素传播的过程，直到达到最具体的目标元素。这个过程可以用 addEventListener() 方法来实现，通过设置第三个参数为 true 来启用事件捕获。在事件捕获阶段中，事件会首先被最外层的元素捕获，然后向下传播到目标元素。</p>\\n<p>事件冒泡则是指事件从目标元素开始向外传播到最外层的元素的过程。在事件冒泡阶段中，事件会首先在目标元素上触发，然后从内向外依次传播到包含元素，直到最外层的元素。这是事件传播的默认行为，如果不设置事件捕获，那么事件会按照事件冒泡的方式进行传播。</p>","autoDesc":true}');export{e as data};
